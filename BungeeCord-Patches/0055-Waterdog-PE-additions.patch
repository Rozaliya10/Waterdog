From 1385785ea7da8f23e8d9e0cacd5cf1f1b333090b Mon Sep 17 00:00:00 2001
From: Colin Godsey <crgodsey@gmail.com>
Date: Tue, 16 Apr 2019 07:50:11 -0600
Subject: [PATCH] Waterdog PE (additions)


diff --git a/api/src/main/java/network/ycc/waterdog/api/metrics/RakNetMetrics.java b/api/src/main/java/network/ycc/waterdog/api/metrics/RakNetMetrics.java
new file mode 100644
index 00000000..73495872
--- /dev/null
+++ b/api/src/main/java/network/ycc/waterdog/api/metrics/RakNetMetrics.java
@@ -0,0 +1,7 @@
+package network.ycc.waterdog.api.metrics;
+
+public interface RakNetMetrics {
+    void preCompressionBytes(int i);
+    void postCompressionBytes(int i);
+    void preCompressionPacket(int i);
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
new file mode 100644
index 00000000..f0b65065
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PEBlockRewrite.java
@@ -0,0 +1,170 @@
+package network.ycc.waterdog.pe;
+
+import io.netty.buffer.ByteBuf;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+public abstract class PEBlockRewrite {
+
+    protected static final int nV8Blocks = 16 * 16 * 16;
+
+    public abstract int map(int id);
+
+    public void rewriteClientbound(ByteBuf packet, int version) {
+        if (version >= ProtocolConstants.MINECRAFT_PE_1_13) {
+            return; //TODO: finish 1.12 format
+        }
+
+        final int readerIndex = packet.readerIndex();
+        final int packetId = DefinedPacket.readVarInt(packet);
+        final int writerIndex = packet.readerIndex();
+
+        switch (packetId) { //same-size rewrites
+            case 0x3a: //FULL_CHUNK_DATA_PACKET
+                DefinedPacket.readSVarInt(packet); //chunk X
+                DefinedPacket.readSVarInt(packet); //chunk Z
+                final ByteBuf out = packet.alloc().ioBuffer(packet.readableBytes() + 128);
+                try {
+                    final int rwStart = packet.readerIndex();
+                    DefinedPacket.readVarInt(packet); //payload length
+                    final int sections = DefinedPacket.readVarInt(packet);
+                    out.writeByte(sections);
+                    rewriteChunkSections(packet, out, sections);
+
+                    packet.readerIndex(readerIndex);
+                    packet.writerIndex(rwStart);
+                    DefinedPacket.writeVarInt(out.readableBytes(), packet); //payload length
+                    packet.writeBytes(out);
+                } finally {
+                    out.release();
+                }
+                return;
+            default: // NOOP
+        }
+
+        switch (packetId) { //varint rewrites
+            case 0x15: { //UPDATE_BLOCK_PACKET
+                final int x = DefinedPacket.readSVarInt(packet);
+                final int y = DefinedPacket.readVarInt(packet);
+                final int z = DefinedPacket.readSVarInt(packet);
+                final int id = DefinedPacket.readVarInt(packet);
+                final int flags = DefinedPacket.readVarInt(packet);
+                final int layer = DefinedPacket.readVarInt(packet);
+
+                packet.readerIndex(readerIndex);
+                packet.writerIndex(writerIndex);
+
+                DefinedPacket.writeSVarInt(x, packet);
+                DefinedPacket.writeVarInt(y, packet);
+                DefinedPacket.writeSVarInt(z, packet);
+                DefinedPacket.writeVarInt(map(id), packet);
+                DefinedPacket.writeVarInt(flags, packet);
+                DefinedPacket.writeVarInt(layer, packet);
+                return;
+            }
+            case 0x19: { //LEVEL_EVENT_PACKET
+                final int evID = DefinedPacket.readSVarInt(packet);
+                final float x = packet.readFloatLE();
+                final float y = packet.readFloatLE();
+                final float z = packet.readFloatLE();
+                int data = DefinedPacket.readSVarInt(packet);
+
+                switch (evID) {
+                    case PEDataValues.LEVEL_EVENT_EVENT_TERRAIN_PARTICLE:
+                    case PEDataValues.LEVEL_EVENT_EVENT_PARTICLE_PUNCH_BLOCK:
+                    case PEDataValues.LEVEL_EVENT_EVENT_PARTICLE_DESTROY:
+                        //only rewrite lower 16 bits
+                        final int high = data & 0xFFFF0000;
+                        final int blockID = map(data & 0xFFFF) & 0xFFFF;
+                        data = high | blockID;
+                        break;
+                    default: // NOOP
+                }
+
+                packet.readerIndex(readerIndex);
+                packet.writerIndex(writerIndex);
+
+                DefinedPacket.writeSVarInt(evID, packet);
+                packet.writeFloatLE(x);
+                packet.writeFloatLE(y);
+                packet.writeFloatLE(z);
+                DefinedPacket.writeSVarInt(data, packet);
+                return;
+            }
+            case 0x7b: { //PLAY_LEVEL_SOUND_EVENT_PACKET
+                final int sound = DefinedPacket.readVarInt(packet);
+                final float x = packet.readFloatLE();
+                final float y = packet.readFloatLE();
+                final float z = packet.readFloatLE();
+                int data = DefinedPacket.readSVarInt(packet);
+                final byte[] remaining = new byte[packet.readableBytes()];
+                packet.readBytes(remaining);
+
+                switch (sound) {
+                    case 6: // SOUND_PLACE
+                        data = map(data);
+                        break;
+                    default: // NOOP
+                }
+
+                packet.readerIndex(readerIndex);
+                packet.writerIndex(writerIndex);
+
+                DefinedPacket.writeVarInt(sound, packet);
+                packet.writeFloatLE(x);
+                packet.writeFloatLE(y);
+                packet.writeFloatLE(z);
+                DefinedPacket.writeSVarInt(data, packet);
+                packet.writeBytes(remaining);
+                return;
+            }
+            case 0x0D: //PLAY_ENTITY_SPAWN TODO: entity spawn for fall blocks, DATA_VARIANT
+            default: // NOOP
+        }
+
+        packet.readerIndex(readerIndex);
+    }
+
+    protected void rewriteChunkSections(ByteBuf in, ByteBuf out, int sections) {
+        for (int section = 0 ; section < sections ; section++) {
+            final int subchunkVersion = in.readUnsignedByte();
+            out.writeByte(subchunkVersion);
+            switch (subchunkVersion) {
+                case 0: //legacy block ids, no remap needed
+                    out.writeBytes(in);
+                    return;
+                case 8: //new form chunk, baked-in palette
+                    rewriteV8ChunkSection(in, out);
+                    break;
+                default: //unsupported
+                    throw new IllegalArgumentException("Unknown subchunk format " + subchunkVersion);
+            }
+        }
+        out.writeBytes(in, 512); //heightmap
+        out.writeBytes(in, 256); //biomedata
+    }
+
+    protected void rewriteV8ChunkSection(ByteBuf in, ByteBuf out) {
+        final int storageCount = in.readUnsignedByte();
+        out.writeByte(storageCount);
+
+        for (int storage = 0 ; storage < storageCount ; storage++) {
+            final int flags = in.readUnsignedByte();
+            final int bitsPerBlock = flags >> 1; //isRuntime = (flags & 0x1) != 0
+            final int blocksPerWord = Integer.SIZE / bitsPerBlock;
+            final int nWords = (nV8Blocks + blocksPerWord - 1) / blocksPerWord;
+
+            out.writeByte(flags);
+            out.writeBytes(in, nWords * Integer.BYTES);
+
+            final int nPaletteEntries = DefinedPacket.readSVarInt(in);
+            DefinedPacket.writeSVarInt(nPaletteEntries, out);
+
+            for (int i = 0 ; i < nPaletteEntries ; i++) {
+                DefinedPacket.writeSVarInt(map(DefinedPacket.readSVarInt(in)), out);
+            }
+        }
+    }
+
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PEDataValues.java b/protocol/src/main/java/network/ycc/waterdog/pe/PEDataValues.java
new file mode 100644
index 00000000..9d983810
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PEDataValues.java
@@ -0,0 +1,54 @@
+package network.ycc.waterdog.pe;
+
+import net.md_5.bungee.api.ChatMessageType;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+public class PEDataValues {
+    public static final int CHAT_CLIENT_RAW_TYPE = 0;
+    public static final int CHAT_CLIENT_CHAT_TYPE = 1;
+    public static final int CHAT_CLIENT_TIP_TYPE = 5;
+    public static final int CHAT_CLIENT_SYSTEM_TYPE = 6;
+
+    public static final int PARTICLE_TYPE_TERRAIN = 18;
+
+    public static final int LEVEL_EVENT_EVENT_ADD_PARTICLE_MASK = 0x4000;
+    public static final int LEVEL_EVENT_EVENT_TERRAIN_PARTICLE = LEVEL_EVENT_EVENT_ADD_PARTICLE_MASK | PARTICLE_TYPE_TERRAIN;
+    public static final int LEVEL_EVENT_EVENT_PARTICLE_PUNCH_BLOCK = 2014;
+    public static final int LEVEL_EVENT_EVENT_PARTICLE_DESTROY = 2001;
+
+    public static int getPcChatType(int peId) {
+        switch (peId) {
+            case CHAT_CLIENT_TIP_TYPE: return ChatMessageType.ACTION_BAR.ordinal();
+            case CHAT_CLIENT_SYSTEM_TYPE: return ChatMessageType.SYSTEM.ordinal();
+            default: return ChatMessageType.CHAT.ordinal();
+        }
+    }
+
+    public static int getPeChatType(int pcId, ProtocolConstants.Direction direction) {
+        switch (ChatMessageType.values()[pcId]) {
+            case ACTION_BAR: return CHAT_CLIENT_TIP_TYPE;
+            case SYSTEM: return CHAT_CLIENT_SYSTEM_TYPE;
+            default:
+                return direction == ProtocolConstants.Direction.TO_SERVER ?
+                        CHAT_CLIENT_CHAT_TYPE : CHAT_CLIENT_RAW_TYPE;
+        }
+    }
+
+    public static int getPeDimensionId(int dimId) {
+        switch (dimId) {
+            case -1: return 1;
+            case 1: return 2;
+            case 0: return 0;
+            default: throw new IllegalArgumentException("Unknown dim id " + dimId);
+        }
+    }
+
+    public static int getPcDimensionId(int dimId) {
+        switch (dimId) {
+            case 1: return -1;
+            case 2: return 1;
+            case 0: return 0;
+            default: throw new IllegalArgumentException("Unknown dim id " + dimId);
+        }
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java b/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java
new file mode 100644
index 00000000..1b637023
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/PERawPacketData.java
@@ -0,0 +1,133 @@
+package network.ycc.waterdog.pe;
+
+import com.google.common.base.Preconditions;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import java.util.UUID;
+
+public class PERawPacketData {
+    protected static final int PLAYER_ACTION_ID = 36;
+    protected static final int EXT_PS_AWAIT_DIM_SWITCH_ACK_ID = -100;
+    protected static final int DIMENSION_CHANGE_ACK = 14;
+
+    private static final byte[] fakePEChunkData;
+    private static final byte[] fakePEChunkData112;
+
+    static {
+        ByteBuf serializer = Unpooled.buffer();
+        ByteBuf chunkdata = Unpooled.buffer();
+
+        chunkdata.writeByte(1); //1 section
+        chunkdata.writeByte(8); //New subchunk version!
+        chunkdata.writeByte(1); //Zero blockstorages :O
+        chunkdata.writeByte((1 << 1) | 1);  //Runtimeflag and palette id.
+        chunkdata.writeZero(512);
+        DefinedPacket.writeSVarInt(1, chunkdata); //Palette size
+        DefinedPacket.writeSVarInt(0, chunkdata); //Air
+        chunkdata.writeZero(512); //heightmap.
+        chunkdata.writeZero(256); //Biomedata.
+        chunkdata.writeByte(0); //borders
+
+        chunkdata.markReaderIndex();
+        DefinedPacket.writeVarInt(chunkdata.readableBytes(), serializer);
+        serializer.writeBytes(chunkdata);
+        fakePEChunkData = new byte[serializer.readableBytes()];
+        serializer.readBytes(fakePEChunkData);
+
+        // 1.12 chunks
+        chunkdata.resetReaderIndex();
+        ByteBuf buf112 = Unpooled.buffer();
+        DefinedPacket.writeVarInt(chunkdata.readUnsignedByte(), buf112);
+        buf112.writeByte(0);
+        DefinedPacket.writeVarInt(chunkdata.readableBytes(), buf112);
+        buf112.writeBytes(chunkdata);
+        fakePEChunkData112 = new byte[buf112.readableBytes()];
+        buf112.readBytes(fakePEChunkData112);
+
+        Preconditions.checkArgument(fakePEChunkData.length > 0);
+        Preconditions.checkArgument(fakePEChunkData112.length > 0);
+    }
+
+    public static int peekPacketId(ByteBuf from) {
+        if (!from.isReadable()) {
+            return -1;
+        }
+        try {
+            return DefinedPacket.readVarInt(from.markReaderIndex());
+        } finally {
+            from.resetReaderIndex();
+        }
+    }
+
+    public static boolean isDimSwitchAck(ByteBuf data) {
+        if (peekPacketId(data) == PLAYER_ACTION_ID) {
+            final ByteBuf copy = data.duplicate();
+            DefinedPacket.readVarInt(copy);
+            DefinedPacket.readVarLong(copy); // entity id
+            return DefinedPacket.readSVarInt(copy) == DIMENSION_CHANGE_ACK;
+        }
+        return false;
+    }
+
+    public static void injectChunkPublisherUpdate(Channel channel, int x, int y, int z) {
+        ByteBuf publisherUpdate = Unpooled.buffer();
+        DefinedPacket.writeVarInt(0x79, publisherUpdate); //CHUNK_PUBLISHER_UPDATE_PACKET
+        DefinedPacket.writeSVarInt(x, publisherUpdate);
+        DefinedPacket.writeVarInt(y, publisherUpdate);
+        DefinedPacket.writeSVarInt(z, publisherUpdate);
+        DefinedPacket.writeVarInt(300, publisherUpdate);
+        channel.write(publisherUpdate);
+    }
+
+    public static void injectForcedDimChange(Channel channel, int version) {
+        injectChunkPublisherUpdate(channel, 0, 0, 0);
+        for (int x = -4; x <= 4; x++) {
+            for (int z = -4; z <= 4; z++) {
+                ByteBuf buffer = Unpooled.buffer();
+                DefinedPacket.writeVarInt(0x3A, buffer); //PLAY_CHUNK_DATA
+                DefinedPacket.writeSVarInt(x, buffer);
+                DefinedPacket.writeSVarInt(z, buffer);
+                if (version >= ProtocolConstants.MINECRAFT_PE_1_12) {
+                    buffer.writeBytes(fakePEChunkData112);
+                } else {
+                    buffer.writeBytes(fakePEChunkData);
+                }
+                channel.write(buffer);
+            }
+        }
+        ByteBuf lockPacket = Unpooled.buffer();
+        DefinedPacket.writeVarInt(EXT_PS_AWAIT_DIM_SWITCH_ACK_ID, lockPacket);
+        channel.writeAndFlush(lockPacket);
+    }
+
+    public static void injectGameMode(Channel channel, int gamemode) {
+        ByteBuf gameMode = Unpooled.buffer();
+        DefinedPacket.writeVarInt(0x3E, gameMode); //PLAY_PLAYER_GAME_TYPE
+        DefinedPacket.writeSVarInt(gamemode, gameMode);
+        channel.writeAndFlush(gameMode);
+    }
+
+    public static void injectRemoveEntity(Channel channel, long entityId) {
+        ByteBuf removeEntity = Unpooled.buffer();
+        DefinedPacket.writeVarInt(0x0E, removeEntity); //PLAY_ENTITY_DESTROY
+        DefinedPacket.writeSVarLong(entityId, removeEntity);
+        channel.write(removeEntity);
+    }
+
+    public static void injectRemovePlayerList(Channel channel, UUID uuid) {
+        ByteBuf removePlayerList = Unpooled.buffer();
+        DefinedPacket.writeVarInt(0x3F, removePlayerList); //PLAY_PLAYER_INFO
+        DefinedPacket.writeVarInt(1, removePlayerList); //remove
+        DefinedPacket.writeVarInt(1, removePlayerList); //1 item
+        removePlayerList.writeLongLE(uuid.getMostSignificantBits());
+        removePlayerList.writeLongLE(uuid.getLeastSignificantBits());
+        channel.write(removePlayerList);
+    }
+
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PECommand.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PECommand.java
new file mode 100644
index 00000000..94786b16
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PECommand.java
@@ -0,0 +1,37 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@NoArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PECommand extends DefinedPacket {
+    String message;
+    private byte[] data;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        setMessage(readString(buf));
+        data = new byte[buf.readableBytes()];
+        buf.readBytes(data);
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        writeString(getMessage(), buf);
+        buf.writeBytes(data);
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionRequest.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionRequest.java
new file mode 100644
index 00000000..75784080
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionRequest.java
@@ -0,0 +1,31 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class PEEncryptionRequest extends DefinedPacket {
+    private String jwtData;
+
+    @Override
+    public void read(ByteBuf buf) {
+        jwtData = readString(buf);
+    }
+
+    @Override
+    public void write(ByteBuf buf) {
+        writeString(jwtData, buf);
+    }
+
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionResponse.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionResponse.java
new file mode 100644
index 00000000..bfd8b92b
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEEncryptionResponse.java
@@ -0,0 +1,27 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+public class PEEncryptionResponse extends DefinedPacket {
+    @Override
+    public void write(ByteBuf buf) {
+
+    }
+
+    @Override
+    public void read(ByteBuf buf) {
+        buf.skipBytes(buf.readableBytes());
+    }
+
+    public void handle(AbstractPacketHandler handler) throws Exception {
+
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEHandshake.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEHandshake.java
new file mode 100644
index 00000000..d3e8e2d8
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEHandshake.java
@@ -0,0 +1,48 @@
+package network.ycc.waterdog.pe.packet;
+
+import com.google.gson.JsonObject;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.packet.Handshake;
+
+import java.util.UUID;
+
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PEHandshake extends Handshake {
+    private String username;
+    private UUID uuid;
+    private UUID deviceUUID;
+    private boolean authorized;
+    private JsonObject clientInfo;
+    private byte[] handshakeData;
+
+    public PEHandshake() {
+        setProtocolVersion(2);
+    }
+
+    public PEHandshake(int protocolVersion, String host, int port, String username, UUID uuid, boolean authorized, JsonObject clientInfo) {
+        super(protocolVersion, host, port, 2);
+        this.username = username;
+        this.uuid = uuid;
+        this.authorized = authorized;
+        this.clientInfo = clientInfo;
+    }
+
+    @Override
+    public void read(ByteBuf buf) {
+        handshakeData = new byte[buf.readableBytes()];
+        buf.readBytes(handshakeData);
+    }
+
+    @Override
+    public void write(ByteBuf buf) {
+        buf.writeBytes(handshakeData);
+    }
+
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELocalPlayerInitialized.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELocalPlayerInitialized.java
new file mode 100644
index 00000000..e0c0b55f
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELocalPlayerInitialized.java
@@ -0,0 +1,34 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PELocalPlayerInitialized extends DefinedPacket {
+    private long playerId;
+
+    @Override
+    public void read(ByteBuf buf) {
+        playerId = readVarLong(buf);
+    }
+
+    @Override
+    public void write(ByteBuf buf) {
+        writeVarLong(playerId, buf);
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java
new file mode 100644
index 00000000..a675241f
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PELogin.java
@@ -0,0 +1,160 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.protocol.packet.Login;
+import network.ycc.waterdog.pe.PEDataValues;
+
+@Data
+@NoArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PELogin extends Login {
+    private float spawnX;
+    private float spawnY;
+    private float spawnZ;
+    private byte[] tailPayload;
+    private int payloadPaletteOffset; //offset of tailPayload for the palette
+    private int payloadPaletteLength;
+
+    public PELogin(int entityId, short gameMode, int dimension, short difficulty, short maxPlayers, String levelType, int viewDistance, boolean reducedDebugInfo, byte[] tailPayload) {
+        super(entityId, gameMode, dimension, difficulty, maxPlayers, levelType, viewDistance, reducedDebugInfo);
+        this.tailPayload = tailPayload;
+    }
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        readSVarLong(buf); //entity id (but it's actually signed varlong, so we use the field below, which is unsigned)
+        setEntityId((int) readVarLong(buf));
+        setGameMode((short) readSVarInt(buf));
+        spawnX = buf.readFloatLE(); //x
+        spawnY = buf.readFloatLE(); //y
+        spawnZ = buf.readFloatLE(); //z
+        buf.readFloatLE(); //yaw
+        buf.readFloatLE(); //pitch
+        readSVarInt(buf); //seed
+        setDimension(PEDataValues.getPcDimensionId(readSVarInt(buf)));
+        readSVarInt(buf); //world type (1 - infinite)
+        readSVarInt(buf); //world gamemode (SURVIVAL)
+        setDifficulty((short) readSVarInt(buf));
+
+        final int payloadStartIndex = buf.readerIndex();
+        tailPayload = new byte[buf.readableBytes()];
+        buf.readBytes(tailPayload);
+        buf.readerIndex(payloadStartIndex);
+
+        DefinedPacket.readSVarInt(buf);//spawn position
+        DefinedPacket.readVarInt(buf);
+        DefinedPacket.readSVarInt(buf);
+        buf.readBoolean(); //disable achievements
+        DefinedPacket.readSVarInt(buf); //time
+        buf.readBoolean(); //edu mode
+        buf.readBoolean(); //edu features
+        buf.readFloatLE(); //rain level
+        buf.readFloatLE(); //lighting level
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_9) {
+            buf.readBoolean(); //???
+        }
+        buf.readBoolean(); //is multiplayer
+        buf.readBoolean(); //broadcast to lan
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_9) {
+            DefinedPacket.readSVarInt(buf); //xbox live broadcast, 3 = friends of friends
+            DefinedPacket.readSVarInt(buf); //platform broadcast
+        } else {
+            buf.readBoolean(); //broadcast to xbl
+        }
+        buf.readBoolean(); //commands enabled
+        buf.readBoolean(); //needs texture pack
+        
+        final int nGameRules = DefinedPacket.readVarInt(buf); //game rules
+        for (int i = 0 ; i < nGameRules ; i++) {
+            DefinedPacket.readString(buf);
+            final int grType = DefinedPacket.readVarInt(buf);
+            switch (grType) {
+                case 1: {
+                    buf.readByte();
+                    break;
+                }
+                case 2: {
+                    DefinedPacket.readSVarInt(buf);
+                    break;
+                }
+                case 3: {
+                    buf.readFloatLE();
+                    break;
+                }
+                default:
+                    throw new IllegalArgumentException("Unknown game rule type " + grType);
+            }
+        }
+
+        buf.readBoolean(); //bonus chest
+        buf.readBoolean(); //player map enabled
+        if (protocolVersion < ProtocolConstants.MINECRAFT_PE_1_9) {
+            buf.readBoolean(); //trust players
+        }
+        DefinedPacket.readSVarInt(buf); //permission level
+        if (protocolVersion < ProtocolConstants.MINECRAFT_PE_1_9) {
+            DefinedPacket.readSVarInt(buf); //game publish setting
+        }
+        buf.readIntLE(); //Server chunk tick radius..
+        if (protocolVersion < ProtocolConstants.MINECRAFT_PE_1_9) {
+            buf.readBoolean(); //Platformbroadcast
+            DefinedPacket.readSVarInt(buf); //Broadcast mode
+            buf.readBoolean(); //Broadcast intent
+        }
+        buf.readBoolean(); //hasLockedRes pack
+        buf.readBoolean(); //hasLockedBeh pack
+        buf.readBoolean(); //hasLocked world template.
+        buf.readBoolean(); //Microsoft GamerTags only. Hell no!
+        buf.readBoolean(); //is from world template
+        buf.readBoolean(); //is world template option locked
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_12) {
+            buf.readByte(); //only spawn v1 villagers
+        }
+        DefinedPacket.readString(buf); //level ID (empty string)
+        DefinedPacket.readString(buf); //world name (empty string)
+        DefinedPacket.readString(buf); //premium world template id (empty string)
+        buf.readBoolean(); //is trial
+        buf.readLongLE(); //world ticks
+        DefinedPacket.readSVarInt(buf); //enchantment seed FFS MOJANG
+
+        final int paletteItems = DefinedPacket.readVarInt(buf);
+        final int paletteStart = buf.readerIndex();
+        for (int i = 0 ; i < paletteItems ; i++) {
+            final int strLength = DefinedPacket.readVarInt(buf);
+            if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_12) {
+                buf.skipBytes(strLength + 4);
+            } else {
+                buf.skipBytes(strLength + 2);
+            }
+        }
+        payloadPaletteOffset = paletteStart - payloadStartIndex;
+        payloadPaletteLength = buf.readerIndex() - paletteStart;
+
+        buf.skipBytes(buf.readableBytes()); //skip the rest
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        writeSVarLong(getEntityId(), buf);
+        writeVarLong(getEntityId(), buf);
+        writeSVarInt(getGameMode(), buf);
+        buf.writeFloatLE(spawnX); //player x
+        buf.writeFloatLE(spawnY); //player y
+        buf.writeFloatLE(spawnZ); //player z
+        buf.writeFloatLE(0); //player pitch
+        buf.writeFloatLE(0); //player yaw
+        writeSVarInt(0, buf); //seed
+        writeSVarInt(PEDataValues.getPeDimensionId(getDimension()), buf); //world dimension
+        writeSVarInt(1, buf); //world type (1 - infinite)
+        writeSVarInt(0, buf); //world gamemode
+        writeSVarInt(getDifficulty(), buf); //world difficulty
+        buf.writeBytes(tailPayload);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PERemoveObjectivePacket.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PERemoveObjectivePacket.java
new file mode 100644
index 00000000..7fe81e63
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PERemoveObjectivePacket.java
@@ -0,0 +1,34 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PERemoveObjectivePacket extends DefinedPacket {
+    private String objectiveName;
+
+    @Override
+    public void write(ByteBuf buf) {
+        writeString(objectiveName, buf);
+    }
+
+    @Override
+    public void read(ByteBuf buf) {
+        objectiveName = readString(buf);
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePack.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePack.java
new file mode 100644
index 00000000..55a572ef
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePack.java
@@ -0,0 +1,37 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PEResourcePack extends DefinedPacket {
+    @Override
+    public void read(ByteBuf buf) {
+        buf.skipBytes(buf.readableBytes());
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion) {
+        buf.writeBoolean(false); // required
+        buf.writeShortLE(0); //beh packs count
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_9) {
+            buf.writeBoolean(false); // ???
+        }
+        buf.writeShortLE(0); //res packs count
+        if (protocolVersion >= ProtocolConstants.MINECRAFT_PE_1_9) {
+            buf.writeBoolean(false); // ???
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePackResponse.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePackResponse.java
new file mode 100644
index 00000000..0948f2c4
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourcePackResponse.java
@@ -0,0 +1,40 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PEResourcePackResponse extends DefinedPacket {
+    public static final byte STATUS_REFUSED = 1;
+    public static final byte STATUS_SEND_PACKS = 2;
+    public static final byte STATUS_HAVE_ALL_PACKS = 3;
+    public static final byte STATUS_COMPLETED = 4;
+
+    private int status;
+
+    @Override
+    public void read(ByteBuf buf) {
+        status = buf.readUnsignedByte();
+        buf.skipBytes(buf.readableBytes());
+    }
+
+    @Override
+    public void write(ByteBuf buf) {
+        buf.writeByte(status);
+        buf.writeShortLE(0); //n packs
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourceStack.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourceStack.java
new file mode 100644
index 00000000..c94bd6f0
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PEResourceStack.java
@@ -0,0 +1,32 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PEResourceStack extends DefinedPacket {
+    @Override
+    public void read(ByteBuf buf) {
+        buf.skipBytes(buf.readableBytes());
+    }
+
+    @Override
+    public void write(ByteBuf buf) {
+        buf.writeBoolean(false); // required
+        writeVarInt(0, buf); //beh packs count
+        writeVarInt(0, buf); //res packs count
+        writeVarInt(0, buf); //?
+        writeVarInt(0, buf); //?
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PESetDisplayObjectivePacket.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PESetDisplayObjectivePacket.java
new file mode 100644
index 00000000..c6eb87eb
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PESetDisplayObjectivePacket.java
@@ -0,0 +1,46 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PESetDisplayObjectivePacket extends DefinedPacket {
+    private String displaySlot;
+    private String objectiveName;
+    private String displayName;
+    private String criteriaName;
+    private int sortOrder;
+
+    @Override
+    public void write(ByteBuf buf) {
+        writeString(displaySlot, buf);
+        writeString(objectiveName, buf);
+        writeString(displayName, buf);
+        writeString(criteriaName, buf);
+        buf.writeByte(sortOrder);
+    }
+
+    @Override
+    public void read(ByteBuf buf) {
+        displaySlot = readString(buf);
+        objectiveName = readString(buf);
+        displayName = readString(buf);
+        criteriaName = readString(buf);
+        sortOrder = buf.readUnsignedByte();
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        handler.handle(this);
+    }
+}
diff --git a/protocol/src/main/java/network/ycc/waterdog/pe/packet/PETransfer.java b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PETransfer.java
new file mode 100644
index 00000000..0a5d0f6f
--- /dev/null
+++ b/protocol/src/main/java/network/ycc/waterdog/pe/packet/PETransfer.java
@@ -0,0 +1,39 @@
+package network.ycc.waterdog.pe.packet;
+
+import io.netty.buffer.ByteBuf;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PETransfer extends DefinedPacket {
+    String host;
+    int port;
+
+    @Override
+    public void read(ByteBuf buf)
+    {
+        host = readString(buf);
+        port = buf.readUnsignedShortLE();
+    }
+
+    @Override
+    public void write(ByteBuf buf)
+    {
+        writeString(host, buf);
+        buf.writeShortLE(port);
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception {
+        //TODO: real handler to handle server drive transfer. should remember the server if we can
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_PE.java b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_PE.java
new file mode 100644
index 00000000..c439ecbb
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/entitymap/EntityMap_PE.java
@@ -0,0 +1,234 @@
+package net.md_5.bungee.entitymap;
+
+import io.netty.buffer.ByteBuf;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+
+import java.util.UUID;
+import java.util.function.Consumer;
+import java.util.function.LongConsumer;
+
+public class EntityMap_PE extends EntityMap {
+
+    static final EntityMap_PE INSTANCE = new EntityMap_PE();
+
+    @Override
+    public void rewriteServerbound(ByteBuf packet, int oldId, int newId) {
+        doRewrite(packet, oldId, newId);
+    }
+
+    @Override
+    public void rewriteClientbound(ByteBuf from, int oldId, int newId) {
+        doRewrite(from, oldId, newId);
+    }
+
+    public void doRewrite(ByteBuf from, int oldId, int newId) {
+        if (!from.isReadable()) {
+            return;
+        }
+        final ByteBuf to = from.duplicate();
+        final int originalReader = from.readerIndex();
+        final int packetId = DefinedPacket.readVarInt(from);
+        final Consumer<Rewrite> act = cmd -> cmd.rewrite(from, to, oldId, newId);
+
+        to.readerIndex(to.readerIndex() - 16); //rewrite in place, but with 16 byte lead
+        to.writerIndex(to.readerIndex());
+        DefinedPacket.writeVarInt(packetId, to);
+
+        switch (packetId) {
+            case 0x12: //PLAY_ENTITY_TELEPORT
+            case 0x1B: //PLAY_ENTITY_STATUS
+            case 0x1C: //PLAY_ENTITY_EFFECT
+            case 0x1D: //PLAY_ENTITY_ATTRIBUTES
+            case 0x1F: //PLAY_MOB_EQUIPMENT
+            case 0x24: //PLAY_PLAYER_ACTION
+            case 0x27: //PLAY_ENTITY_METADATA
+            case 0x28: //PLAY_ENTITY_VELOCITY
+            case 0x6F: //PLAY_MOVE_ENTITY_DELTA
+            case 0x71: //PLAY_LOCAL_PLAYER_INITIALIZED
+                act.accept(VARLONG);
+                break;
+            case 0x0C: //PLAY_SPAWN_PLAYER
+                to.writeBytes(from, Long.BYTES * 2);
+                act.accept(SK_VI_DATA);
+                act.accept(SVARLONG);
+                act.accept(VARLONG);
+                break;
+            case 0x0D: //PLAY_ENTITY_SPAWN
+            case 0x0F: //PLAY_ADD_ITEM_ENTITY
+            case 0x16: //PLAY_ADD_PAINTING_PACKET
+                act.accept(SVARLONG); //unique id
+                act.accept(VARLONG); //runtime id
+                break;
+            case 0x0E: //PLAY_ENTITY_DESTROY
+            case 0x4A: //PLAY_BOSS_EVENT
+                act.accept(SVARLONG);
+                break;
+            case 0x11: //PLAY_ENTITY_COLLECT_EFFECT
+                act.accept(VARLONG);
+                act.accept(VARLONG);
+                break;
+            case 0x13: //PLAY_PLAYER_MOVE_LOOK
+                act.accept(VARLONG);
+                to.writeBytes(from, Float.BYTES * 6 + Byte.BYTES * 2);
+                act.accept(VARLONG);
+                break;
+            case 0x21: //PLAY_INTERACT
+                to.writeBytes(from, 1);
+                act.accept(VARLONG);
+                break;
+            case 0x29: //PLAY_ENTITY_PASSENGER
+                act.accept(SVARLONG);
+                act.accept(SVARLONG);
+                break;
+            case 0x2C: //PLAY_ENTITY_ANIMATION
+                act.accept(SK_SVARINT);
+                act.accept(VARLONG);
+                break;
+            case 0x37: { //PLAY_ADVENTURE_SETTINGS
+                final int idIndex = from.writerIndex() - Long.BYTES;
+                final long id = from.getLongLE(idIndex);
+                from.setLongLE(idIndex, id == oldId ? newId : (id == newId ? oldId : id));
+                from.readerIndex(originalReader);
+                return;
+            }
+            case 0x3F: { //PLAY_PLAYER_INFO
+                final int type = from.readUnsignedByte();
+                final int num = DefinedPacket.readVarInt(from);
+                to.writeByte(type);
+                DefinedPacket.writeVarInt(num, to);
+                if (type == 0) { //ADD
+                    for (int i = 0; i < num; i++) {
+                        to.writeBytes(from, Long.BYTES * 2);
+                        act.accept(SVARLONG);
+                        act.accept(SK_VI_DATA); //username
+                        act.accept(SK_VI_DATA); //skin name
+                        act.accept(SK_VI_DATA); //skin data
+                        act.accept(SK_VI_DATA); //cape data
+                        act.accept(SK_VI_DATA); //geom name
+                        act.accept(SK_VI_DATA); //geom data
+                        act.accept(SK_VI_DATA); //xuid
+                        act.accept(SK_VI_DATA); //channel
+                    }
+                }
+                break;
+            }
+            case 0x50: //PLAY_TRADE_UPDATE
+                to.writeBytes(from, 2);
+                act.accept(SK_SVARINT);
+                act.accept(SK_SVARINT);
+                act.accept(SK_SVARINT);
+                to.writeBytes(from, 1);
+                act.accept(SVARLONG);
+                act.accept(SVARLONG);
+                break;
+            default:
+                from.readerIndex(originalReader);
+                return;
+        }
+
+        to.writeBytes(from); //copy the rest
+
+        from.readerIndex(to.readerIndex());
+        from.writerIndex(to.writerIndex());
+    }
+
+    public void entityTrack(ByteBuf packet, LongConsumer add, LongConsumer remove) {
+        if (!packet.isReadable()) {
+            return;
+        }
+        final int readerIndex = packet.readerIndex();
+        switch (DefinedPacket.readVarInt(packet)) {
+            case 0x0C: //PLAY_SPAWN_PLAYER
+                packet.skipBytes(Long.BYTES * 2);
+                DefinedPacket.readString(packet);
+                DefinedPacket.readSVarLong(packet); //unique ID
+                add.accept(DefinedPacket.readVarLong(packet));
+                break;
+            case 0x0D: //PLAY_ENTITY_SPAWN
+            case 0x0F: //PLAY_ADD_ITEM_ENTITY
+            case 0x16: //PLAY_ADD_PAINTING_PACKET
+                DefinedPacket.readSVarLong(packet);
+                add.accept(DefinedPacket.readVarLong(packet));
+                break;
+            case 0x0E: //PLAY_ENTITY_DESTROY
+                remove.accept(DefinedPacket.readSVarLong(packet));
+                break;
+            default: // NOOP
+        }
+
+        packet.readerIndex(readerIndex);
+    }
+
+    public void playerListTrackRewrite(ByteBuf packet, Consumer<UUID> add, Consumer<UUID> remove, UUID playerUUID, UUID deviceUUID) {
+        if (!packet.isReadable()) {
+            return;
+        }
+        final int readerIndex = packet.readerIndex();
+        switch (DefinedPacket.readVarInt(packet)) {
+            case 0x3F: { //PLAY_PLAYER_INFO
+                final int type = packet.readUnsignedByte();
+                final int num = DefinedPacket.readVarInt(packet);
+                if (type == 0) { //ADD
+                    for (int i = 0; i < num; i++) {
+                        final int preUUIDReaderIndex = packet.readerIndex();
+                        final long msb = packet.readLongLE();
+                        final long lsb = packet.readLongLE();
+                        if (deviceUUID != null && msb == playerUUID.getMostSignificantBits()
+                                && lsb == playerUUID.getLeastSignificantBits()) {
+                            packet.setLongLE(preUUIDReaderIndex, deviceUUID.getMostSignificantBits());
+                            packet.setLongLE(preUUIDReaderIndex + Long.BYTES, deviceUUID.getLeastSignificantBits());
+                        }
+                        DefinedPacket.readSVarLong(packet); //entity id
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //username
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //skin name
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //skin data
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //cape data
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //geom name
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //geom data
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //xuid
+                        packet.skipBytes(DefinedPacket.readVarInt(packet)); //channel
+                        add.accept(new UUID(msb, lsb));
+                    }
+                } else if (type == 1) { //REMOVE
+                    for (int i = 0; i < num; i++) {
+                        final long msb = packet.readLongLE();
+                        final long lsb = packet.readLongLE();
+                        remove.accept(new UUID(msb, lsb));
+                    }
+                }
+                break;
+            }
+            default: // NOOP
+        }
+
+        packet.readerIndex(readerIndex);
+    }
+
+    public interface Rewrite {
+        void rewrite(ByteBuf from, ByteBuf to, int oldId, int newId);
+    }
+
+    static public final Rewrite SK_VI_DATA = (from, to, oldId, newId) -> {
+        final int length = DefinedPacket.readVarInt(from);
+        DefinedPacket.writeVarInt(length, to);
+        to.writeBytes(from, length);
+    };
+
+    static public final Rewrite SK_SVARINT = (from, to, oldId, newId) ->
+        DefinedPacket.writeSVarInt(DefinedPacket.readSVarInt(from), to);
+
+    static public final Rewrite SK_VARINT = (from, to, oldId, newId) ->
+            DefinedPacket.writeVarInt(DefinedPacket.readVarInt(from), to);
+
+    static public final Rewrite VARLONG = (from, to, oldId, newId) -> {
+        final long id = DefinedPacket.readVarLong(from);
+        DefinedPacket.writeVarLong(id == oldId ? newId : (id == newId ? oldId : id), to);
+    };
+
+    static public final Rewrite SVARLONG = (from, to, oldId, newId) -> {
+        final long id = DefinedPacket.readSVarLong(from);
+        DefinedPacket.writeSVarLong(id == oldId ? newId : (id == newId ? oldId : id), to);
+    };
+
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java
new file mode 100644
index 00000000..1ae4a6de
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEBlockPalette.java
@@ -0,0 +1,165 @@
+package network.ycc.waterdog.pe;
+
+import com.google.common.collect.MapMaker;
+
+import io.netty.buffer.ByteBuf;
+
+import it.unimi.dsi.fastutil.objects.Object2ShortLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Object2ShortMap;
+import it.unimi.dsi.fastutil.shorts.Short2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.shorts.Short2ObjectMap;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import org.apache.commons.lang3.tuple.Pair;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentMap;
+
+public final class PEBlockPalette {
+
+    static ConcurrentMap<UUID, PEBlockPalette> paletteCache =
+            new MapMaker().weakValues().concurrencyLevel(8).makeMap();
+
+    public static PEBlockPalette get(ByteBuf paletteData, int version) {
+        final UUID uuid = nameUUIDFromBytes(paletteData);
+        PEBlockPalette cached = paletteCache.get(uuid);
+        if (cached == null) {
+            cached = new PEBlockPalette(paletteData, version, uuid);
+            // lazy thread safe. idempotent, but might be set multiple times
+            paletteCache.put(uuid, cached);
+        }
+        return cached;
+    }
+
+    static UUID nameUUIDFromBytes(ByteBuf buf) {
+        final MessageDigest md;
+        try {
+            md = MessageDigest.getInstance("MD5");
+        } catch (NoSuchAlgorithmException nsae) {
+            throw new InternalError("MD5 not supported", nsae);
+        }
+
+        buf.markReaderIndex();
+        while (buf.isReadable()) {
+            md.update(buf.readByte());
+        }
+        buf.resetReaderIndex();
+
+        final byte[] md5Bytes = md.digest();
+        md5Bytes[6]  &= 0x0f;  /* clear version        */
+        md5Bytes[6]  |= 0x30;  /* set to version 3     */
+        md5Bytes[8]  &= 0x3f;  /* clear variant        */
+        md5Bytes[8]  |= 0x80;  /* set to IETF variant  */
+
+        long msb = 0;
+        long lsb = 0;
+        assert md5Bytes.length == 16 : "data must be 16 bytes in length";
+        for (int i = 0 ; i < 8 ; i++) {
+            msb = (msb << 8) | (md5Bytes[i] & 0xff);
+        }
+        for (int i = 8 ; i < 16 ; i++) {
+            lsb = (lsb << 8) | (md5Bytes[i] & 0xff);
+        }
+
+        return new UUID(msb, lsb);
+    }
+
+    final UUID uuid;
+
+    Object2ShortMap<BlockPair> entryToId = new Object2ShortLinkedOpenHashMap<>();
+    Short2ObjectMap<BlockPair> idToEntry = new Short2ObjectLinkedOpenHashMap<>();
+
+    public PEBlockRewrite createRewrite(PEBlockPalette to) {
+        return new PEBlockRewrite() {
+            public int map(int id) {
+                return to.getId(getEntry(id));
+            }
+        };
+    }
+
+    PEBlockPalette(ByteBuf buf, int version, UUID uuid) {
+        this.uuid = uuid;
+
+        if (version >= ProtocolConstants.MINECRAFT_PE_1_12) {
+            while (buf.isReadable()) {
+                final String name = DefinedPacket.readString(buf);
+                final short data = buf.readShortLE();
+                final short id = buf.readShortLE();
+
+                addEntry(id, name, data);
+            }
+        } else {
+            int id = 0;
+            while (buf.isReadable()) {
+                final String name = DefinedPacket.readString(buf);
+                final short data = buf.readShortLE();
+
+                addEntry((short) id++, name, data);
+            }
+        }
+    }
+
+    void addEntry(short id, String name, short data) {
+        final BlockPair pair = new BlockPair(name, data);
+        entryToId.put(pair, id);
+        idToEntry.put(id, pair);
+    }
+
+    int getId(BlockPair entry) {
+        return entryToId.getShort(entry) & 0xFFFF;
+    }
+
+    public UUID getUUID() {
+        return uuid;
+    }
+
+    BlockPair getEntry(int id) {
+        return idToEntry.get((short) id);
+    }
+
+    public static final class BlockPair extends Pair<String, Short> {
+        final String key;
+        final short data;
+        final int hash;
+
+        public BlockPair(String name, short data) {
+            this.key = name;
+            this.data = data;
+            hash = super.hashCode();
+        }
+
+        public String getLeft() {
+            return key;
+        }
+
+        public Short getRight() {
+            return data;
+        }
+
+        public Short setValue(Short value) {
+            throw new UnsupportedOperationException();
+        }
+
+        @Override
+        public int hashCode() {
+            return hash;
+        }
+
+        @Override
+        public boolean equals(Object obj) {
+            if (this == obj) {
+                return true;
+            } else if (obj instanceof BlockPair) {
+                final BlockPair other = (BlockPair) obj;
+                return data == other.data && key.equals(other.key);
+            }
+            return false;
+        }
+    }
+
+}
+
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PECompressor.java b/proxy/src/main/java/network/ycc/waterdog/pe/PECompressor.java
new file mode 100644
index 00000000..86034cb3
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PECompressor.java
@@ -0,0 +1,94 @@
+package network.ycc.waterdog.pe;
+
+import com.google.common.base.Preconditions;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelOutboundHandlerAdapter;
+import io.netty.channel.ChannelPromise;
+import io.netty.util.ReferenceCountUtil;
+
+import net.md_5.bungee.compress.CompressFactory;
+import net.md_5.bungee.jni.zlib.BungeeZlib;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+import network.ycc.raknet.RakNet;
+import network.ycc.raknet.pipeline.FlushTickHandler;
+import network.ycc.waterdog.api.metrics.RakNetMetrics;
+
+import java.util.function.BiConsumer;
+import java.util.zip.DataFormatException;
+import java.util.zip.Deflater;
+
+public class PECompressor extends ChannelOutboundHandlerAdapter {
+
+    public static final String NAME = "compress";
+    protected static final int MAX_POOL_BYTES = 16 * 1024;
+
+    protected final BungeeZlib zlib = CompressFactory.zlib.newInstance();
+    protected ByteBuf stashBuffer;
+
+    @Override
+    public void handlerAdded(ChannelHandlerContext ctx) {
+        zlib.init( true, Deflater.DEFAULT_COMPRESSION );
+        stashBuffer = ctx.alloc().directBuffer(MAX_POOL_BYTES);
+    }
+
+    @Override
+    public void handlerRemoved(ChannelHandlerContext ctx) {
+        zlib.free();
+        ReferenceCountUtil.safeRelease(stashBuffer);
+    }
+
+    @Override
+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {
+        if (msg instanceof ByteBuf) {
+            final ByteBuf buf = (ByteBuf) msg;
+            if (!buf.isReadable()) {
+                buf.release();
+                promise.trySuccess();
+                return;
+            }
+            try {
+                DefinedPacket.writeVarInt(buf.readableBytes(), stashBuffer);
+                stashBuffer.writeBytes(buf);
+            } finally {
+                buf.release();
+            }
+            if (stashBuffer.readableBytes() > MAX_POOL_BYTES) {
+                flushData(ctx);
+            }
+            metricsIncrement(ctx, 1, RakNetMetrics::preCompressionPacket);
+            promise.trySuccess();
+            FlushTickHandler.checkFlushTick(ctx.channel());
+            return;
+        }
+        super.write(ctx, msg, promise);
+    }
+
+    @Override
+    public void flush(ChannelHandlerContext ctx) throws Exception {
+        if (stashBuffer.readableBytes() > 0) {
+            flushData(ctx);
+        }
+        super.flush(ctx);
+    }
+
+    protected void flushData(ChannelHandlerContext ctx) throws DataFormatException {
+        final ByteBuf out = ctx.alloc().directBuffer(128);
+        Preconditions.checkArgument(stashBuffer.hasMemoryAddress(), "pre-compression buffer is not direct");
+        metricsIncrement(ctx, stashBuffer.readableBytes(), RakNetMetrics::preCompressionBytes);
+        zlib.process(stashBuffer, out);
+        metricsIncrement(ctx, out.readableBytes(), RakNetMetrics::postCompressionBytes);
+        stashBuffer.clear();
+        ctx.write(out).addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+    }
+
+    protected void metricsIncrement(ChannelHandlerContext ctx, int i, BiConsumer<RakNetMetrics, Integer> consumer) {
+        final RakNet.MetricsLogger metrics = ctx.channel().config().getOption(RakNet.METRICS);
+        if (metrics instanceof RakNetMetrics) {
+            consumer.accept((RakNetMetrics) metrics, i);
+        }
+    }
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEDecompressor.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEDecompressor.java
new file mode 100644
index 00000000..5d785901
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEDecompressor.java
@@ -0,0 +1,38 @@
+package network.ycc.waterdog.pe;
+
+import com.google.common.base.Preconditions;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.util.ReferenceCountUtil;
+
+import net.md_5.bungee.compress.PacketDecompressor;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+import java.util.List;
+
+public class PEDecompressor extends PacketDecompressor {
+
+    public static final String NAME = "decompress";
+
+    public PEDecompressor() {
+        super(0);
+    }
+
+    @Override
+    protected void decode(ChannelHandlerContext ctx, ByteBuf buf, List<Object> list) throws Exception {
+        buf = PEEncryptionUtils.makeDirectOrRetain(ctx.alloc(), buf);
+        final ByteBuf data = ctx.alloc().ioBuffer(32);
+        try {
+            getZlib().process(buf, data);
+            while (data.isReadable()) {
+                list.add(data.readRetainedSlice(DefinedPacket.readVarInt(data)));
+            }
+            Preconditions.checkArgument(!data.isReadable(), "Compressed data not handled");
+        } finally {
+            ReferenceCountUtil.safeRelease(data);
+            ReferenceCountUtil.safeRelease(buf);
+        }
+    }
+
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEDimSwitchLock.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEDimSwitchLock.java
new file mode 100644
index 00000000..4f0057ee
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEDimSwitchLock.java
@@ -0,0 +1,103 @@
+package network.ycc.waterdog.pe;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelDuplexHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelPromise;
+import io.netty.util.ReferenceCountUtil;
+import io.netty.util.concurrent.ScheduledFuture;
+
+import net.md_5.bungee.BungeeCord;
+
+import java.util.ArrayDeque;
+import java.util.Queue;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Lock outbound packet stream until we get a dim switch ack.
+ */
+public class PEDimSwitchLock extends ChannelDuplexHandler {
+
+    public static final String NAME = "peproxy-dimlock";
+
+    protected static int MAX_QUEUE_SIZE = 4096;
+    protected static int DIM_ACK_TIMEOUT_MILLIS = 15000;
+
+    protected final Queue<ByteBuf> queue = new ArrayDeque<>(32);
+    protected boolean isLocked = false;
+    protected ScheduledFuture<?> timeoutTimer = null;
+
+    public static boolean isChannelLocked(Channel channel) {
+        final PEDimSwitchLock thiz = (PEDimSwitchLock) channel.pipeline().get(NAME);
+        return thiz != null ? thiz.isLocked : false;
+    }
+
+    @Override
+    public void channelUnregistered(ChannelHandlerContext ctx) throws Exception {
+        super.channelUnregistered(ctx);
+        queue.forEach(ReferenceCountUtil::safeRelease);
+        queue.clear();
+        stopTimeout();
+    }
+
+    @Override
+    public void channelRead(ChannelHandlerContext ctx, Object msg) {
+        if (msg instanceof ByteBuf) {
+            if(isLocked && PERawPacketData.isDimSwitchAck((ByteBuf) msg)) {
+                doUnlock(ctx);
+            }
+        }
+        ctx.fireChannelRead(msg);
+    }
+
+    @Override
+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) {
+        if (msg instanceof ByteBuf) {
+            if (isLocked) {
+                queue.add((ByteBuf) msg);
+                promise.trySuccess();
+                if (queue.size() > MAX_QUEUE_SIZE) {
+                    BungeeCord.getInstance().getLogger().warning(
+                            "PEDimSwitchLock: queue got too large, closing connection.");
+                    ctx.channel().close();
+                }
+                return;
+            } else if (PERawPacketData.peekPacketId((ByteBuf) msg)
+                    == PERawPacketData.EXT_PS_AWAIT_DIM_SWITCH_ACK_ID) {
+                isLocked = true;
+                startTimeout(ctx);
+                ctx.fireChannelWritabilityChanged(); //alert UpstreamBridge
+                return;
+            }
+        }
+        ctx.write(msg, promise);
+    }
+
+    protected void startTimeout(ChannelHandlerContext ctx) {
+        stopTimeout();
+        timeoutTimer = ctx.channel().eventLoop().schedule(() -> {
+            BungeeCord.getInstance().getLogger().warning(
+                    "PEDimSwitchLock: Dim switch ack timeout. Resuming...");
+            doUnlock(ctx);
+        }, DIM_ACK_TIMEOUT_MILLIS, TimeUnit.MILLISECONDS);
+    }
+
+    protected void stopTimeout() {
+        if (timeoutTimer != null) {
+            timeoutTimer.cancel(false);
+            timeoutTimer = null;
+        }
+    }
+
+    protected void doUnlock(ChannelHandlerContext ctx) {
+        isLocked = false;
+        stopTimeout();
+        ctx.fireChannelWritabilityChanged(); //alert UpstreamBridge
+        while (!queue.isEmpty() && !isLocked) {
+            write(ctx, queue.remove(), ctx.voidPromise());
+        }
+        ctx.flush();
+    }
+
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionInitializer.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionInitializer.java
new file mode 100644
index 00000000..0b21c9f1
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionInitializer.java
@@ -0,0 +1,110 @@
+package network.ycc.waterdog.pe;
+
+import com.nimbusds.jose.JWSObject;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInitializer;
+
+import io.netty.util.ReferenceCountUtil;
+import lombok.RequiredArgsConstructor;
+
+import net.md_5.bungee.EncryptionUtil;
+import net.md_5.bungee.jni.cipher.BungeeCipher;
+import net.md_5.bungee.netty.PipelineUtils;
+import net.md_5.bungee.netty.cipher.CipherDecoder;
+import net.md_5.bungee.netty.cipher.CipherEncoder;
+
+import network.ycc.waterdog.pe.packet.PEHandshake;
+import network.ycc.waterdog.pe.packet.PEEncryptionRequest;
+
+import javax.crypto.KeyAgreement;
+import javax.crypto.spec.SecretKeySpec;
+
+import java.security.MessageDigest;
+import java.security.NoSuchAlgorithmException;
+import java.security.PublicKey;
+import java.util.Base64;
+import java.util.List;
+
+@RequiredArgsConstructor
+public class PEEncryptionInitializer extends ChannelInitializer<Channel> {
+    private final PEEncryptionRequest request;
+
+    protected void initChannel(Channel ch) throws Exception {
+        final MessageDigest digest = MessageDigest.getInstance("SHA-256");
+        final JWSObject additionalData = JWSObject.parse(request.getJwtData());
+        final PublicKey publicKey = PEEncryptionUtils.parseKey(additionalData.getHeader().getX509CertURL().toString());
+        final String saltString = additionalData.getPayload().toJSONObject().getAsString("salt");
+        final KeyAgreement ka = KeyAgreement.getInstance("ECDH");
+        ka.init(PEEncryptionUtils.getKeyPair().getPrivate());
+        ka.doPhase(publicKey, true);
+        digest.update(Base64.getDecoder().decode(saltString));
+        digest.update(ka.generateSecret());
+        final byte[] keyBytes = digest.digest();
+        final SecretKeySpec serverKey = new SecretKeySpec(keyBytes, "AES");
+        ch.pipeline().addBefore(PEDecompressor.NAME, PipelineUtils.DECRYPT_HANDLER,
+                new PECipherDecoder(EncryptionUtil.getCipher(false, serverKey)));
+        ch.pipeline().addBefore(PECompressor.NAME, PipelineUtils.ENCRYPT_HANDLER,
+                new PECipherEncoder(EncryptionUtil.getCipher(true, serverKey), keyBytes));
+    }
+
+    static class PECipherDecoder extends CipherDecoder {
+        public PECipherDecoder(BungeeCipher cipher) {
+            super(cipher);
+        }
+
+        @Override
+        protected void decode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception {
+            msg = PEEncryptionUtils.makeDirectOrRetain(ctx.alloc(), msg);
+            try {
+                super.decode(ctx, msg, out);
+                final ByteBuf data = (ByteBuf) out.get(0);
+                data.writerIndex(data.writerIndex() - 8); //ignore hash
+            } finally {
+                msg.release();
+            }
+        }
+    }
+
+    static class PECipherEncoder extends CipherEncoder {
+        private final byte[] keyBytes;
+        private final MessageDigest digest;
+        private long counter = 0;
+
+        public PECipherEncoder(BungeeCipher cipher, byte[] keyBytes) throws NoSuchAlgorithmException {
+            super(cipher);
+            this.keyBytes = keyBytes;
+            this.digest = MessageDigest.getInstance("SHA-256");
+        }
+
+        @Override
+        protected void encode(ChannelHandlerContext ctx, ByteBuf in, ByteBuf out) throws Exception {
+            in = PEEncryptionUtils.makeDirectOrRetain(ctx.alloc(), in);
+            try {
+                appendHash(in);
+                super.encode(ctx, in, out);
+            } finally {
+                in.release();
+            }
+        }
+
+        void appendHash(ByteBuf data) {
+            final ByteBuf counterBytes = Unpooled.buffer(8, 8).writeLongLE(counter++);
+            final int maxReader = data.readerIndex() + data.readableBytes();
+            while (counterBytes.isReadable()) {
+                digest.update(counterBytes.readByte());
+            }
+            for (int i = data.readerIndex() ; i < maxReader ; i++) {
+                digest.update(data.getByte(i));
+            }
+            for (byte b : keyBytes) {
+                digest.update(b);
+            }
+            data.writeBytes(digest.digest(), 0, 8);
+            digest.reset();
+        }
+    }
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionUtils.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionUtils.java
new file mode 100644
index 00000000..369f5aeb
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEEncryptionUtils.java
@@ -0,0 +1,291 @@
+package network.ycc.waterdog.pe;
+
+import com.google.common.base.Charsets;
+import com.google.common.base.Preconditions;
+import com.google.common.reflect.TypeToken;
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSyntaxException;
+
+import com.nimbusds.jose.JOSEException;
+import com.nimbusds.jose.JWSAlgorithm;
+import com.nimbusds.jose.JWSHeader;
+import com.nimbusds.jose.JWSObject;
+import com.nimbusds.jose.Payload;
+import com.nimbusds.jose.crypto.ECDSASigner;
+import com.nimbusds.jose.crypto.factories.DefaultJWSVerifierFactory;
+import com.nimbusds.jose.jwk.Curve;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.ByteBufAllocator;
+import io.netty.buffer.ByteBufInputStream;
+import io.netty.buffer.Unpooled;
+import io.netty.handler.codec.DecoderException;
+import io.netty.handler.codec.EncoderException;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import network.ycc.waterdog.pe.packet.PEHandshake;
+
+import org.apache.commons.lang3.tuple.ImmutablePair;
+import org.apache.commons.lang3.tuple.Pair;
+
+import java.io.InputStreamReader;
+import java.math.BigInteger;
+import java.net.URI;
+import java.nio.charset.StandardCharsets;
+import java.security.Key;
+import java.security.KeyFactory;
+import java.security.KeyPair;
+import java.security.KeyPairGenerator;
+import java.security.NoSuchAlgorithmException;
+import java.security.PublicKey;
+import java.security.spec.InvalidKeySpecException;
+import java.security.spec.X509EncodedKeySpec;
+import java.text.ParseException;
+import java.util.Base64;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.UUID;
+
+public class PEEncryptionUtils {
+    public static final String MOJANG_KEY = "MHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE8ELkixyLcwlZryUQcu1TvPOmI2B7vX83ndnWRUaXm74wFfa5f/lwQNTfrLVHa2PmenpGI6JhIMUJaWZrjmMj90NoKNFSNBuKdm8rYiXsfaz3K36x/1U26HpG0ZxK/V1V";
+
+    static final Gson GSON;
+    static final DefaultJWSVerifierFactory jwsverifierfactory;
+    static final KeyPair keyPair;
+    static final KeyFactory keyfactory;
+
+    static {
+        GSON = new GsonBuilder().setPrettyPrinting().create();
+        jwsverifierfactory = new DefaultJWSVerifierFactory();
+        try {
+            KeyPairGenerator gen = KeyPairGenerator.getInstance("EC");
+            gen.initialize(Curve.P_384.toECParameterSpec());
+            keyPair = gen.generateKeyPair();
+        } catch (Exception e) {
+            throw new RuntimeException("Unable to generate private keypair", e);
+        }
+        try {
+            keyfactory = KeyFactory.getInstance("EC");
+        } catch (NoSuchAlgorithmException e) {
+            throw new RuntimeException("Unable to init key factory", e);
+        }
+    }
+
+    public static void parseHandshake(PEHandshake handshake) {
+        final ByteBuf buf = Unpooled.wrappedBuffer(handshake.getHandshakeData());
+        final int protocolVersion = buf.readInt() - ProtocolConstants.PE_PROTOCOL_OFFSET;
+        final ByteBuf loginData = buf.readSlice(DefinedPacket.readVarInt(buf));
+        final ByteBuf chainDataBytes = loginData.readSlice(loginData.readIntLE());
+        final ByteBuf jwsDataBytes = loginData.readSlice(loginData.readIntLE());
+        final Pair<Key, JsonObject> chainData = extractChainData(GSON.fromJson(
+                new InputStreamReader(new ByteBufInputStream(chainDataBytes)),
+                new TypeToken<Map<String, List<String>>>() {}.getType()
+        ));
+        final Key key = chainData.getLeft();
+        final JsonObject identityData = chainData.getRight();
+        final String jwsString = jwsDataBytes.readCharSequence(jwsDataBytes.readableBytes(), Charsets.UTF_8).toString();
+        final JWSObject additionalData;
+        try {
+            additionalData = JWSObject.parse(jwsString);
+        } catch (ParseException e) {
+            throw new DecoderException("Failed to parse jws string: " + jwsString, e);
+        }
+        final JsonObject clientInfo = GSON.fromJson(additionalData.getPayload().toString(), JsonObject.class);
+        final String serverAddr = clientInfo.get("ServerAddress").getAsString();
+        Preconditions.checkArgument(serverAddr != null, "ServerAddress is missing");
+        final String[] serverAddrSplit = serverAddr.split("[:]");
+
+        handshake.setClientInfo(clientInfo);
+        handshake.setUsername(getString(identityData, "displayName").replaceAll(" ", "_")); //TODO: make configurable
+        handshake.setUuid(UUID.fromString(getString(identityData, "identity")));
+        handshake.setDeviceUUID(handshake.getUuid());
+        handshake.setAuthorized(key != null);
+        if (handshake.isAuthorized()) {
+            handshake.setUuid(new UUID(0, new BigInteger(getString(identityData, "XUID")).longValue()));
+        }
+        handshake.setHost(serverAddrSplit[0]);
+        if (serverAddrSplit.length > 1) {
+            handshake.setPort(Integer.parseInt(serverAddrSplit[1]));
+        }
+        handshake.setProtocolVersion(protocolVersion);
+        handshake.setRequestedProtocol(2);
+    }
+
+    public static void createHandshake(PEHandshake handshake) {
+        final ByteBuf buf = Unpooled.buffer(512);
+        final byte[] identityData = createIdentityData(handshake.getUsername(),
+                handshake.getUuid()).getBytes(StandardCharsets.UTF_8);
+        final byte[] clientData = createClientData(handshake.getClientInfo(),
+                handshake.getHost(), handshake.getPort(), handshake.getUuid()).getBytes(StandardCharsets.UTF_8);
+        buf.writeInt(handshake.getProtocolVersion() + ProtocolConstants.PE_PROTOCOL_OFFSET);
+        DefinedPacket.writeVarInt(identityData.length + clientData.length + 8, buf);
+        buf.writeIntLE(identityData.length);
+        buf.writeBytes(identityData);
+        buf.writeIntLE(clientData.length);
+        buf.writeBytes(clientData);
+        handshake.setHandshakeData(new byte[buf.readableBytes()]);
+        buf.readBytes(handshake.getHandshakeData());
+    }
+
+    static public ByteBuf makeDirectOrRetain(ByteBufAllocator alloc, ByteBuf in) {
+        if (in.hasMemoryAddress()) {
+            return in.retain();
+        }
+        final ByteBuf out = alloc.directBuffer(in.readableBytes());
+        out.writeBytes(in);
+        return out;
+    }
+
+    ////// READING
+
+    static Pair<Key, JsonObject> extractChainData(Map<String, List<String>> maindata) {
+        final List<String> chain = maindata.get("chain");
+        try {
+            PublicKey key = parseKey(MOJANG_KEY);
+            boolean foundMojangKey = false;
+            boolean signatureValid = false;
+            for (String element : chain) {
+                final JWSObject jwsobject = JWSObject.parse(element);
+                if (!foundMojangKey && jwsobject.getHeader().getX509CertURL().toString().equals(MOJANG_KEY)) {
+                    foundMojangKey = true;
+                    signatureValid = true;
+                }
+                if (foundMojangKey && !verify(jwsobject, key)) {
+                    signatureValid = false;
+                }
+                final JsonObject jsonobject = GSON.fromJson(jwsobject.getPayload().toString(), JsonObject.class);
+                key = parseKey(getString(jsonobject, "identityPublicKey"));
+                if (jsonobject.has("extraData")) {
+                    return new ImmutablePair<>(signatureValid ? key : null, getJsonObject(jsonobject, "extraData"));
+                }
+            }
+        } catch (InvalidKeySpecException | JOSEException e) {
+            throw new DecoderException("Unable to decode login chain", e);
+        } catch (ParseException e) {
+            throw new DecoderException("Unable to parse: " + maindata, e);
+        }
+        throw new DecoderException("Unable to find extraData");
+    }
+
+    static String getString(JsonObject jsonObject, String name) {
+        if (jsonObject.has(name)) {
+            return getAsString(jsonObject.get(name), name);
+        }
+        throw new JsonSyntaxException("Missing " + name + ", expected to find a string");
+    }
+
+    static String getAsString(JsonElement jsonElement, String name) {
+        if (jsonElement.isJsonPrimitive()) {
+            return jsonElement.getAsString();
+        }
+        throw new JsonSyntaxException("Expected " + name + " to be a string, was " + toString(jsonElement));
+    }
+
+    static JsonObject getAsJsonObject(JsonElement jsonElement, String name) {
+        if (jsonElement.isJsonObject()) {
+            return jsonElement.getAsJsonObject();
+        }
+        throw new JsonSyntaxException("Expected " + name + " to be a JsonObject, was " + toString(jsonElement));
+    }
+
+    static JsonObject getJsonObject(JsonObject jsonObject, String name) {
+        if (jsonObject.has(name)) {
+            return getAsJsonObject(jsonObject.get(name), name);
+        }
+        throw new JsonSyntaxException("Missing " + name + ", expected to find an Object");
+    }
+
+    static String toString(JsonElement jsonElement) {
+        final String abbreviateMiddle = String.valueOf(jsonElement);
+        if (jsonElement == null) {
+            return "null (missing)";
+        }
+        if (jsonElement.isJsonNull()) {
+            return "null (json)";
+        }
+        if (jsonElement.isJsonArray()) {
+            return "an array (" + abbreviateMiddle + ")";
+        }
+        if (jsonElement.isJsonObject()) {
+            return "an object (" + abbreviateMiddle + ")";
+        }
+        if (jsonElement.isJsonPrimitive()) {
+            final JsonPrimitive asJsonPrimitive = jsonElement.getAsJsonPrimitive();
+            if (asJsonPrimitive.isNumber()) {
+                return "a number (" + abbreviateMiddle + ")";
+            }
+            if (asJsonPrimitive.isBoolean()) {
+                return "a boolean (" + abbreviateMiddle + ")";
+            }
+        }
+        return abbreviateMiddle;
+    }
+
+    static boolean verify(JWSObject object, PublicKey key) throws JOSEException {
+        return object.verify(jwsverifierfactory.createJWSVerifier(object.getHeader(), key));
+    }
+
+    static public PublicKey parseKey(String key) throws InvalidKeySpecException {
+        return keyfactory.generatePublic(new X509EncodedKeySpec(Base64.getDecoder().decode(key)));
+    }
+
+    ////// WRITING
+
+    public static KeyPair getKeyPair() {
+        return keyPair;
+    }
+
+    @SuppressWarnings("serial")
+    static String createIdentityData(String username, UUID uuid) {
+        final Map<String, List<String>> chainmap = new HashMap<>();
+        final long iat = System.currentTimeMillis() / 1000;
+        final long exp = iat + 24 * 3600;
+        JsonObject dataChain = new JsonObject();
+        JsonObject extraData = new JsonObject();
+        extraData.addProperty("identity", uuid.toString());
+        extraData.addProperty("displayName", username);
+        extraData.addProperty("XUID", String.valueOf(uuid.getLeastSignificantBits()));
+        //chain
+        dataChain.addProperty("nbf", iat - 10);
+        dataChain.addProperty("exp", exp);
+        dataChain.addProperty("iat", iat);
+        dataChain.addProperty("iss", "self");
+        dataChain.addProperty("certificateAuthority", true);
+        dataChain.add("extraData", extraData);
+        dataChain.addProperty("randomNonce", UUID.randomUUID().getLeastSignificantBits());
+        dataChain.addProperty("identityPublicKey", Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded()));
+        chainmap.put("chain", Collections.singletonList(encodeJWT(dataChain)));
+        return GSON.toJson(chainmap, new TypeToken<Map<String, List<String>>>() {}.getType());
+    }
+
+    static String encodeJWT(JsonObject payload) {
+        try {
+            JWSObject jwsobject = new JWSObject(
+                    new JWSHeader.Builder(JWSAlgorithm.ES384)
+                            .x509CertURL(new URI(Base64.getEncoder().encodeToString(keyPair.getPublic().getEncoded())))
+                            .build(),
+                    new Payload(GSON.toJson(payload))
+            );
+            jwsobject.sign(new ECDSASigner(keyPair.getPrivate(), Curve.P_384));
+            return jwsobject.serialize();
+        } catch (Exception e) {
+            throw new EncoderException("Unable to encode jwt", e);
+        }
+    }
+
+    static String createClientData(JsonObject baseClientInfo, String host, int port, UUID uuid) {
+        JsonObject out = new JsonObject();
+        baseClientInfo.entrySet().forEach(entry -> out.add(entry.getKey(), entry.getValue()));
+        out.addProperty("ServerAddress", host + ":" + port);
+        out.addProperty("SelfSignedId", uuid.toString());
+        return encodeJWT(out);
+    }
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEPipelineUtils.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEPipelineUtils.java
new file mode 100644
index 00000000..5ef25093
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEPipelineUtils.java
@@ -0,0 +1,88 @@
+package network.ycc.waterdog.pe;
+
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+import io.netty.channel.ChannelInitializer;
+
+import io.netty.channel.ChannelPipeline;
+import io.netty.channel.socket.DatagramPacket;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.ReferenceCountUtil;
+import lombok.RequiredArgsConstructor;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ListenerInfo;
+import net.md_5.bungee.netty.PipelineUtils;
+import net.md_5.bungee.protocol.MinecraftDecoder;
+import net.md_5.bungee.protocol.ProtocolConstants;
+import net.md_5.bungee.query.QueryHandler;
+
+import network.ycc.raknet.pipeline.UserDataCodec;
+
+import network.ycc.waterdog.api.event.UserChannelTapEvent;
+
+import java.util.concurrent.TimeUnit;
+import java.util.logging.Level;
+
+public class PEPipelineUtils {
+    public static final UserDataCodec MC_USER_DATA_CODEC = new UserDataCodec(0xFE);
+
+    public static final ChannelInitializer<Channel> SERVER_CHILD = new ChannelInitializer<Channel>() {
+        protected void initChannel(Channel channel) {
+            ChannelPipeline pipeline = channel.pipeline();
+            pipeline
+            .addLast(UserDataCodec.NAME, MC_USER_DATA_CODEC)
+            .addLast(PECompressor.NAME, new PECompressor())
+            .addLast(PEDecompressor.NAME, new PEDecompressor())
+            .addLast(PEDimSwitchLock.NAME, new PEDimSwitchLock())
+            .addLast(new ChannelInboundHandlerAdapter() {
+                @Override
+                public void channelRead(ChannelHandlerContext ctx, Object msg) {
+                    if (msg instanceof network.ycc.raknet.packet.Packet) {
+                        BungeeCord.getInstance().getLogger().log(Level.FINER, "Stray raknet packet sent to a child channel handler");
+                        ReferenceCountUtil.safeRelease(msg);
+                        return;
+                    }
+                    ctx.fireChannelRead(msg);
+                }
+            })
+            .addLast(PipelineUtils.SERVER_CHILD);
+            pipeline.replace(PEPongHandler.NAME, PEPongHandler.NAME, new PEPongHandler());
+            pipeline.replace(PipelineUtils.FRAME_DECODER, PipelineUtils.FRAME_DECODER, new ChannelInboundHandlerAdapter());
+            pipeline.replace(PipelineUtils.FRAME_PREPENDER, PipelineUtils.FRAME_PREPENDER, new ChannelInboundHandlerAdapter());
+            pipeline.get(MinecraftDecoder.class).setProtocolVersion(ProtocolConstants.MINECRAFT_PE_1_8);
+            channel.eventLoop().execute(() -> {
+                //move this to the top of the pipeline
+                channel.pipeline().remove(PipelineUtils.TIMEOUT_HANDLER);
+                channel.pipeline().addFirst(PipelineUtils.TIMEOUT_HANDLER, new ReadTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ));
+            });
+        }
+    };
+
+    @RequiredArgsConstructor
+    public static final class ServerChannel extends ChannelInitializer<Channel> {
+        private final ProxyServer bungee;
+        private final ListenerInfo listener;
+
+        @Override
+        protected void initChannel(Channel channel) throws Exception {
+            channel.eventLoop().execute(() -> {
+                channel.pipeline().addLast(new ChannelInboundHandlerAdapter() {
+                    @Override
+                    public void channelRead(ChannelHandlerContext ctx, Object msg) {
+                        if (msg instanceof DatagramPacket) {
+                            bungee.getLogger().log(Level.FINER, "Stray datagram sent to server channel handler");
+                            ReferenceCountUtil.safeRelease(msg);
+                            return;
+                        }
+                        ctx.fireChannelRead(msg);
+                    }
+                });
+            });
+            channel.pipeline()
+            .addLast(new PEProxyServerInfoHandler(bungee, listener))
+            .addLast(new QueryHandler(bungee, listener));
+        }
+    }
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEPongHandler.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEPongHandler.java
new file mode 100644
index 00000000..59a9c22a
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEPongHandler.java
@@ -0,0 +1,18 @@
+package network.ycc.waterdog.pe;
+
+import io.netty.buffer.Unpooled;
+import io.netty.channel.ChannelHandlerContext;
+import net.md_5.bungee.protocol.PacketWrapper;
+import net.md_5.bungee.protocol.packet.KeepAlive;
+import network.ycc.raknet.RakNet;
+import network.ycc.raknet.packet.Pong;
+import network.ycc.raknet.pipeline.PongHandler;
+
+public class PEPongHandler extends PongHandler {
+    @Override
+    protected void channelRead0(ChannelHandlerContext ctx, Pong pong) {
+        super.channelRead0(ctx, pong);
+        final RakNet.Config config = (RakNet.Config) ctx.channel().config();
+        ctx.fireChannelRead(new PacketWrapper(new KeepAlive(config.getRTTNanos()), Unpooled.EMPTY_BUFFER));
+    }
+}
diff --git a/proxy/src/main/java/network/ycc/waterdog/pe/PEProxyServerInfoHandler.java b/proxy/src/main/java/network/ycc/waterdog/pe/PEProxyServerInfoHandler.java
new file mode 100644
index 00000000..66563ead
--- /dev/null
+++ b/proxy/src/main/java/network/ycc/waterdog/pe/PEProxyServerInfoHandler.java
@@ -0,0 +1,148 @@
+package network.ycc.waterdog.pe;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelFutureListener;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.socket.DatagramPacket;
+import io.netty.util.ReferenceCountUtil;
+
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.ServerPing;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ListenerInfo;
+import net.md_5.bungee.api.connection.PendingConnection;
+import net.md_5.bungee.api.event.ProxyPingEvent;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+import network.ycc.raknet.RakNet;
+import network.ycc.raknet.packet.Packet;
+import network.ycc.raknet.packet.UnconnectedPing;
+import network.ycc.raknet.packet.UnconnectedPong;
+import network.ycc.raknet.server.pipeline.UdpPacketHandler;
+
+import java.net.InetSocketAddress;
+import java.util.UUID;
+import java.util.logging.Level;
+
+public class PEProxyServerInfoHandler extends UdpPacketHandler<UnconnectedPing> {
+
+    protected final ListenerInfo listenerInfo;
+    protected final ProxyServer bungee;
+
+    public PEProxyServerInfoHandler(ProxyServer bungee, ListenerInfo listenerInfo) {
+        super(UnconnectedPing.class);
+        this.listenerInfo = listenerInfo;
+        this.bungee = bungee;
+    }
+
+    protected void handle(ChannelHandlerContext ctx, InetSocketAddress sender, UnconnectedPing ping) {
+        final RakNet.Config config = RakNet.config(ctx);
+        final long clientTime = ping.getClientTime(); //must ditch references to ping
+        final ServerPing.Protocol protocol = new ServerPing.Protocol(
+                "", //leave version blank, we do multi-version.
+                ProtocolConstants.MINECRAFT_PE_1_11 + ProtocolConstants.PE_PROTOCOL_OFFSET
+        );
+        final ServerPing.Players players = new ServerPing.Players(
+                listenerInfo.getMaxPlayers(), bungee.getOnlineCount(), new ServerPing.PlayerInfo[0]
+        );
+        final BaseComponent desc = new TextComponent(TextComponent.fromLegacyText(listenerInfo.getMotd().trim()));
+        final ServerPing serverPing = new ServerPing(protocol, players, desc, null);
+        final ProxyPingEvent ev = new ProxyPingEvent(new PingConnection(sender), serverPing, (event, throwable) -> {
+            final String response;
+            if (throwable != null) {
+                bungee.getLogger().log(Level.WARNING, "Failed processing PE ping:", throwable);
+                response = "";
+            } else {
+                final ServerPing result = event.getResponse();
+                response = String.join(";",
+                        "MCPE",
+                        result.getDescriptionComponent().toLegacyText().replace(";", "\\;"),
+                        String.valueOf(result.getVersion().getProtocol()),
+                        result.getVersion().getName(),
+                        String.valueOf(result.getPlayers().getOnline()),
+                        String.valueOf(result.getPlayers().getMax()),
+                        String.valueOf(config.getServerId())
+                );
+            }
+            final Packet pong = new UnconnectedPong(clientTime, config.getServerId(), config.getMagic(), response);
+            final ByteBuf tmpBuf = ctx.alloc().ioBuffer(pong.sizeHint());
+            try {
+                config.getCodec().encode(pong, tmpBuf);
+                for (int i = 0 ; i < 3; i++) { //send multiple responses for bad connections
+                    ctx.writeAndFlush(new DatagramPacket(tmpBuf.retainedSlice(), sender))
+                            .addListener(ChannelFutureListener.FIRE_EXCEPTION_ON_FAILURE);
+                }
+            } finally {
+                ReferenceCountUtil.safeRelease(pong);
+                tmpBuf.release();
+            }
+        });
+        bungee.getPluginManager().callEvent(ev);
+    }
+
+    protected class PingConnection implements PendingConnection {
+
+        final InetSocketAddress remoteAddress;
+
+        PingConnection(InetSocketAddress remoteAddress) {
+            this.remoteAddress = remoteAddress;
+        }
+
+        public String getName() {
+            return null;
+        }
+
+        public int getVersion() {
+            return ProtocolConstants.MINECRAFT_PE_1_12;
+        }
+
+        public InetSocketAddress getVirtualHost() {
+            return null;
+        }
+
+        public ListenerInfo getListener() {
+            return listenerInfo;
+        }
+
+        public String getUUID() {
+            return null;
+        }
+
+        public UUID getUniqueId() {
+            return null;
+        }
+
+        public void setUniqueId(UUID uuid) {}
+
+        public boolean isOnlineMode() {
+            return bungee.getConfig().isOnlineMode();
+        }
+
+        public void setOnlineMode(boolean b) {}
+
+        public boolean isLegacy() {
+            return true;
+        }
+
+        public InetSocketAddress getAddress() {
+            return remoteAddress;
+        }
+
+        public void disconnect(String s) {}
+
+        public void disconnect(BaseComponent... baseComponents) {}
+
+        public void disconnect(BaseComponent baseComponent) {}
+
+        public boolean isConnected() {
+            return false;
+        }
+
+        public Unsafe unsafe() {
+            return x -> {};
+        }
+
+    }
+
+}
diff --git a/proxy/src/main/java/protocolsupport/protocol/connection/PSInitEncapsulation.java b/proxy/src/main/java/protocolsupport/protocol/connection/PSInitEncapsulation.java
new file mode 100644
index 00000000..78490b27
--- /dev/null
+++ b/proxy/src/main/java/protocolsupport/protocol/connection/PSInitEncapsulation.java
@@ -0,0 +1,40 @@
+package protocolsupport.protocol.connection;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelInboundHandlerAdapter;
+
+import lombok.AllArgsConstructor;
+
+import net.md_5.bungee.protocol.DefinedPacket;
+
+import java.net.InetSocketAddress;
+
+@AllArgsConstructor
+public class PSInitEncapsulation extends ChannelInboundHandlerAdapter {
+    public static final int HANDSHAKE_ID = 0;
+    public static final int CURRENT_VERSION = 1;
+
+    private final InetSocketAddress address;
+    private final boolean compression;
+
+    @Override
+    public void channelActive(ChannelHandlerContext ctx) throws Exception {
+        final ByteBuf to = ctx.alloc().heapBuffer();
+        to.writeByte(HANDSHAKE_ID);
+        DefinedPacket.writeVarInt(CURRENT_VERSION, to);
+        if (address != null) {
+            final byte[] addr = address.getAddress().getAddress();
+            to.writeBoolean(true);
+            DefinedPacket.writeVarInt(addr.length, to);
+            to.writeBytes(addr);
+            DefinedPacket.writeVarInt(address.getPort(), to);
+        } else {
+            to.writeBoolean(false);
+        }
+        to.writeBoolean(compression);
+        ctx.writeAndFlush(to);
+        super.channelActive(ctx);
+        ctx.pipeline().remove(this);
+    }
+}
-- 
2.17.2 (Apple Git-113)

